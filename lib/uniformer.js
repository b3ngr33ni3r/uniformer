// Generated by CoffeeScript 1.6.3
var cast, defaults, escapedReplace, extend, fs, isArr, isBool, isNum, isStr, pr;

require('js-yaml');

fs = require('fs');

extend = require('extend');

pr = require('path-resolver');

defaults = {
  argv: process.argv,
  debug: false,
  identifiers: ['--', '-'],
  seperators: [' ', ','],
  allowEscaped: true,
  defaults: {}
};

isArr = Array.isArray || function(value) {
  return {}.toString.call(value) === '[object Array]';
};

isBool = function(value) {
  return typeof value === 'boolean';
};

isNum = function(value) {
  return typeof value === 'number';
};

isStr = function(value) {
  return typeof value === 'string';
};

cast = function(value) {
  if (typeof value === 'number' || !isNaN(value)) {
    return new Number(value);
  } else if (value.toLowerCase() === 'false') {
    return false;
  } else if (value.toLowerCase() === 'true') {
    return true;
  } else {
    return value;
  }
};

escapedReplace = function(haystack, needle, replace) {};

module.exports = function(opts) {
  var path, res;
  if (opts == null) {
    opts = null;
  }
  opts = extend(true, defaults, opts);
  res = {};
  if (opts.defaults != null) {
    res = extend(true, res, opts.defaults);
  }
  if ((opts.config != null) && (path = pr.sync(opts.config)) !== false) {
    res = extend(true, res, require(path));
  }
  res = extend(true, res, (function(lopts) {
    var arg, i, id, ids, j, key, largv, lres, ptr, sep, seps, tmp, val, values, _i, _j, _k, _len, _len1, _len2, _results;
    largv = lopts.argv;
    lres = {};
    seps = lopts.seperators.sort(function(a, b) {
      return b.length - a.length;
    });
    ids = lopts.identifiers.sort(function(a, b) {
      return b.length - a.length;
    });
    ptr = null;
    _results = [];
    for (i = _i = 0, _len = largv.length; _i < _len; i = ++_i) {
      arg = largv[i];
      key = null;
      for (_j = 0, _len1 = ids.length; _j < _len1; _j++) {
        id = ids[_j];
        if (arg.substr(0, id.length) === id) {
          key = arg.substr(id.length, arg.length);
          break;
        }
      }
      if (key != null) {
        lres[key] = true;
        _results.push(ptr = key);
      } else {
        if (ptr == null) {
          lres["_root"] = [];
          ptr = "_root";
        }
        values = arg;
        for (j = _k = 0, _len2 = seps.length; _k < _len2; j = ++_k) {
          sep = seps[j];
          if (j + 1 < seps.length) {
            values = lopts.allowEscaped ? escapedReplace(values, sep, seps[seps.length - 1]) : values.replace(sep, seps[seps.length - 1]);
          } else {
            values = values.split(sep);
          }
        }
        if (!isArr(values)) {
          values = [values];
        }
        _results.push((function() {
          var _l, _len3, _results1;
          _results1 = [];
          for (j = _l = 0, _len3 = values.length; _l < _len3; j = ++_l) {
            val = values[j];
            tmp = lres[ptr];
            if (isObj(lres[ptr])) {
              if (lres[ptr]["_root"] == null) {
                lres[ptr]["_root"] = true;
              }
              tmp = lres[ptr]["_root"];
            }
            if (isArr(tmp)) {
              _results1.push(tmp.push(val));
            } else if (isBool(tmp)) {

            } else {
              tmp = [tmp];
              _results1.push(tmp.push(val));
            }
          }
          return _results1;
        })());
      }
    }
    return _results;
  })(opts));
  return res;
};
