// Generated by CoffeeScript 1.6.3
var defaults, extend, fs, isArray, isBool, isKey, isKv, isNested, isObject, isString, isSupported, procArgs, procFile, typeChange, uniformer;

require('js-yaml');

fs = require('fs');

extend = require('extend');

isArray = Array.isArray || function(value) {
  return {}.toString.call(value) === '[object Array]';
};

isString = function(value) {
  return typeof value === 'string';
};

isBool = function(value) {
  return typeof value === 'boolean';
};

isObject = function(value) {
  return typeof value === 'object';
};

isKey = function(val, keyDefs) {
  var keyDef, _i, _len;
  if (keyDefs == null) {
    keyDefs = ['--', '-'];
  }
  if (isString(val)) {
    for (_i = 0, _len = keyDefs.length; _i < _len; _i++) {
      keyDef = keyDefs[_i];
      if (val.substr(0, keyDef.length) === keyDef) {
        return val.substr(keyDef.length, val.length);
      }
    }
  }
  return false;
};

isNested = function(val, fillVal) {
  var dot, dotted, it, result, _i, _len;
  if (fillVal == null) {
    fillVal = true;
  }
  if (!isString(val)) {
    return false;
  }
  dotted = val.split('.');
  if (dotted.length <= 0) {
    return false;
  }
  result = {
    nested: {},
    key: dotted[0]
  };
  it = result.nested;
  for (_i = 0, _len = dotted.length; _i < _len; _i++) {
    dot = dotted[_i];
    if (_i > 1 && _i < _len - 1) {
      it[dot] = {};
      it = it[dot];
    }
  }
  it[dotted[dotted.length - 1]] = fillVal;
  return result;
};

isKv = function(val) {
  var eq, result;
  if (!isString(val)) {
    return false;
  }
  eq = val.split('=');
  if (eq.length <= 0) {
    return false;
  }
  return result = {
    key: eq[0],
    value: eq[1]
  };
};

isSupported = function(key, supported) {
  var support, _i, _len;
  if (supported == null) {
    supported = null;
  }
  if (supported == null) {
    return true;
  }
  for (_i = 0, _len = supported.length; _i < _len; _i++) {
    support = supported[_i];
    if (key === support) {
      return true;
    }
  }
  return false;
};

typeChange = function(val) {
  if (typeof val === 'number') {
    return new Number(val);
  } else if (val.toLowerCase() === 'false') {
    return false;
  } else if (val.toLowerCase() === 'true') {
    return true;
  } else {
    return val;
  }
};

procFile = function(file) {
  if (fs.existsSync(file)) {
    return require(file);
  }
};

procArgs = function(argv) {
  var arg, booleanKey, key, kv, nest, processed, processedPtr, root, _i, _len;
  root = {
    uniformer: {}
  };
  processed = {};
  booleanKey = false;
  processedPtr = processedPtr;
  for (_i = 0, _len = argv.length; _i < _len; _i++) {
    arg = argv[_i];
    if ((key = isKey(arg)) !== false) {
      if ((nest = isNested(key, true)) !== false) {
        if (processed[nest.key] != null) {
          processed[nest.key] = extend(true, processed[nest.key], nest.nest);
        } else {
          processed[nest.key] = nest.nested;
        }
        processedPtr = processed[nest.key];
        booleanKey = true;
      } else if ((kv = isKv(key)) !== false) {
        processed[kv.key] = typeChange(kv.value);
        processedPtr = processedPtr;
        booleanKey = false;
      } else {
        processed[key] = true;
        processedPtr = processed[key];
        booleanKey = true;
      }
    } else {
      if (processedPtr == null) {
        if (!isArray(root.uniformer['_root'])) {
          root.uniformer['_root'] = [];
        }
        root.uniformer['_root'].push(typeChange(arg));
      } else {
        if (booleanKey) {
          processedPtr = typeChange(arg);
          booleanKey = false;
        } else if (!isArray(processedPtr)) {
          processedPtr = [];
          processedPtr.push(typeChange(arg));
        } else {
          processedPtr.push(typeChange(arg));
        }
      }
    }
  }
  return root['processed'] = processed;
};

defaults = {
  argv: process.argv
};

uniformer = function(opts) {
  var processed;
  if (opts == null) {
    opts = null;
  }
  opts = extend(true, defaults, opts);
  processed = extend(true, {}, procArgs(opts.argv));
  if ((processed["config"] != null) && !isSupported("config", opts.supported || null)) {
    opts.file = processed["config"];
    delete processed["config"];
  }
  if (opts.file != null) {
    processed = extend(true, procFile(__dirname + "/" + opts.file), processed);
  }
  return processed;
};

module.exports = uniformer;
