// Generated by CoffeeScript 1.6.3
var Uniformer, argumentIdentifiers, defaults, extend, fs, typeIsArray, _typeProc,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

require('js-yaml');

fs = require('fs');

extend = require('extend');

argumentIdentifiers = ["--", "-"];

typeIsArray = Array.isArray || function(value) {
  return {}.toString.call(value) === '[object Array]';
};

_typeProc = function(val) {
  if (typeof val === 'number') {
    return new Number(val);
  } else if (val.toLowerCase() === 'false') {
    return false;
  } else if (val.toLowerCase() === 'true') {
    return true;
  } else {
    return val;
  }
};

defaults = {
  pipeline: false,
  argv: process.argv
};

Uniformer = (function(_super) {
  var test;

  __extends(Uniformer, _super);

  test = function() {
    return console.log("hi");
  };

  function Uniformer(opts) {
    this.opts = opts != null ? opts : {};
    extend(true, defaults, this.opts);
    if (!this.opts.pipeline) {
      return inlineProcessor();
    }
  }

  Uniformer.prototype.inlineProcessor = function() {
    var processed;
    processed = {};
    if (this.opts.file != null) {
      processed = fileProcessor();
    }
    processed = extend(true, processed, argumentProcessor());
    return processed;
  };

  Uniformer.prototype.fileProcessor = function() {
    return require(this.opts.file);
  };

  Uniformer.prototype.argumentProcessor = function() {
    var arg, processed, _i, _len, _ref, _results;
    processed = {};
    _ref = this.opts.argv;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      arg = _ref[_i];
      if (isSupported(arg)) {
        if (isKey(arg)) {
          _results.push(processed[arg] = getValues(arg, this.opts.argv));
        } else if (isSwitch(arg)) {
          _results.push(processed[arg] = true);
        } else {
          if (this.opts.pipeline) {
            _results.push(this.emit('error', new Uniformer.InvalidArgument(arg)));
          } else {
            _results.push(void 0);
          }
        }
      } else {
        _results.push(void 0);
      }
    }
    return _results;
  };

  return Uniformer;

})(EventEmitter);

module.exports = Uniformer;
