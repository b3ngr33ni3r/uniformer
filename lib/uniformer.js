// Generated by CoffeeScript 1.6.3
var argumentIdentifiers, extend, fs, typeIsArray, uniformer, _chunkProc, _proc, _resolve, _typeProc;

require('js-yaml');

fs = require('fs');

extend = require('extend');

argumentIdentifiers = ["--", "-"];

typeIsArray = Array.isArray || function(value) {
  return {}.toString.call(value) === '[object Array]';
};

_typeProc = function(val) {
  if (typeof val === 'number') {
    return new Number(val);
  } else if (val.toLowerCase() === 'false') {
    return false;
  } else if (val.toLowerCase() === 'true') {
    return true;
  } else {
    return val;
  }
};

_chunkProc = function(resultant, cI, arg) {
  var chunk, chunks, key, oldArg, parent, _i, _len;
  parent = resultant;
  chunks = cI.split('.');
  for (_i = 0, _len = chunks.length; _i < _len; _i++) {
    chunk = chunks[_i];
    if (_i < chunks.length - 1) {
      if (parent[chunk] == null) {
        parent[chunk] = {};
      }
      parent = parent[chunk];
    }
  }
  key = chunks[chunks.length - 1];
  if (parent[key] == null) {
    parent[key] = _typeProc(arg);
  } else {
    if (typeIsArray(parent[key])) {
      parent[key].push(_typeProc(arg));
    } else {
      oldArg = parent[key];
      parent[key] = new Array();
      parent[key].push(oldArg, _typeProc(arg));
    }
  }
  return resultant;
};

_proc = function(argv) {
  var arg, cI, identifier, isKey, resultant, _i, _j, _len, _len1;
  cI = null;
  resultant = {};
  for (_i = 0, _len = argv.length; _i < _len; _i++) {
    arg = argv[_i];
    isKey = false;
    for (_j = 0, _len1 = argumentIdentifiers.length; _j < _len1; _j++) {
      identifier = argumentIdentifiers[_j];
      isKey = arg.substr(0, identifier.length) === identifier;
      if (isKey) {
        cI = arg.substr(identifier.length, arg.length);
        break;
      }
    }
    if (!isKey && cI) {
      resultant = _chunkProc(resultant, cI, arg);
    }
  }
  return resultant;
};

_resolve = function(path) {
  return __dirname + "/" + path;
};

uniformer = function(spec) {
  var argv, resultant;
  if (spec == null) {
    spec = null;
  }
  argv = (spec != null ? spec.argv : void 0) || process.argv;
  resultant = {};
  if (((spec != null ? spec.file : void 0) != null) && fs.existsSync(_resolve(spec.file))) {
    resultant = extend(true, resultant, require(spec.file));
  }
  return resultant = extend(true, resultant, _proc(argv));
};

module.exports = uniformer;
